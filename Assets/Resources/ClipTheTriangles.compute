// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct TriangleData
{
    float3 v0, v1, v2;
    float2 t0, t1, t2;
    float3 n0, n1, n2;
};

RWStructuredBuffer<TriangleData> InputTriangles;
AppendStructuredBuffer<TriangleData> OutputTriangles;
RWStructuredBuffer<uint> TriangleCounter;

float4 Plane;

[numthreads(1, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    TriangleData tri = InputTriangles[id];
    
    float3 vertices[3];
    float2 textures[3];
    float3 normals[3];
    
    bool Inside[3];
    float PlaneDistance[3];
    int inCount = 0;
    
    int inIndex = 0;
    int outIndex1 = 0;
    int outIndex2 = 0;
    
    int outIndex = 0;
    int inIndex1 = 0;
    int inIndex2 = 0;
    
    vertices[0] = tri.v0;
    vertices[1] = tri.v1;
    vertices[2] = tri.v2;
    
    textures[0] = tri.t0;
    textures[1] = tri.t1;
    textures[2] = tri.t2;
    
    normals[0] = tri.n0;
    normals[1] = tri.n1;
    normals[2] = tri.n2;
    
    PlaneDistance[0] = dot(tri.v0, Plane.xyz) + Plane.w;
    Inside[0] = PlaneDistance[0] > 0;
    
    PlaneDistance[1] = dot(tri.v1, Plane.xyz) + Plane.w;
    Inside[1] = PlaneDistance[1] > 0;
    
    PlaneDistance[2] = dot(tri.v2, Plane.xyz) + Plane.w;
    Inside[2] = PlaneDistance[2] > 0;
    
    if (Inside[0])
    {
        inCount++;
    }
    if (Inside[1])
    {
        inCount++;
    }
    if (Inside[2])
    {
        inCount++;
    }
        
    if (inCount == 3)
    {
        OutputTriangles.Append(tri);
        
        InterlockedAdd(TriangleCounter[0], 1);
    }
    else if (inCount == 1)
    {
        if (Inside[0] && !Inside[1] && !Inside[2])
        {
            inIndex = 0;
            outIndex1 = 1;
            outIndex2 = 2;
        }
        else if (!Inside[0] && Inside[1] && !Inside[2])
        {
            outIndex1 = 2;
            inIndex = 1;
            outIndex2 = 0;
        }
        else if (!Inside[0] && !Inside[1] && Inside[2])
        {
            outIndex1 = 0;
            outIndex2 = 1;
            inIndex = 2;
        }

        float t1 = PlaneDistance[inIndex] / (PlaneDistance[inIndex] - PlaneDistance[outIndex1]);
        float t2 = PlaneDistance[inIndex] / (PlaneDistance[inIndex] - PlaneDistance[outIndex2]);
        
        TriangleData tri1;
        
        tri1.v0 = vertices[inIndex];
        tri1.t0 = textures[inIndex];
        tri1.n0 = normals[inIndex];

        tri1.v1 = lerp(vertices[inIndex], vertices[outIndex1], t1);
        tri1.t1 = lerp(textures[inIndex], textures[outIndex1], t1);
        tri1.n1 = normalize(lerp(normals[inIndex], normals[outIndex1], t1));

        tri1.v2 = lerp(vertices[inIndex], vertices[outIndex2], t2);
        tri1.t2 = lerp(textures[inIndex], textures[outIndex2], t2);
        tri1.n2 = normalize(lerp(normals[inIndex], normals[outIndex2], t2));

        OutputTriangles.Append(tri1);
        
        InterlockedAdd(TriangleCounter[0], 1);
    }
    else if (inCount == 2)
    {
        if (!Inside[0] && Inside[1] && Inside[2])
        {
            outIndex = 0;
            inIndex1 = 1;
            inIndex2 = 2;
        }
        else if (Inside[0] && !Inside[1] && Inside[2])
        {
            inIndex1 = 2;
            outIndex = 1;
            inIndex2 = 0;
        }
        else if (Inside[0] && Inside[1] && !Inside[2])
        {
            inIndex1 = 0;
            inIndex2 = 1;
            outIndex = 2;
        }

        float t1 = PlaneDistance[inIndex1] / (PlaneDistance[inIndex1] - PlaneDistance[outIndex]);
        float t2 = PlaneDistance[inIndex2] / (PlaneDistance[inIndex2] - PlaneDistance[outIndex]);
        
        TriangleData tri1;
        
        TriangleData tri2;
        
        tri1.v0 = vertices[inIndex1];
        tri1.t0 = textures[inIndex1];
        tri1.n0 = normals[inIndex1];
        
        tri1.v1 = vertices[inIndex2];
        tri1.t1 = textures[inIndex2];
        tri1.n1 = normals[inIndex2];

        tri1.v2 = lerp(vertices[inIndex1], vertices[outIndex], t1);
        tri1.t2 = lerp(textures[inIndex1], textures[outIndex], t1);
        tri1.n2 = normalize(lerp(normals[inIndex1], normals[outIndex], t1));
        
        tri2.v0 = lerp(vertices[inIndex1], vertices[outIndex], t1);
        tri2.t0 = lerp(textures[inIndex1], textures[outIndex], t1);
        tri2.n0 = normalize(lerp(normals[inIndex1], normals[outIndex], t1));

        tri2.v1 = vertices[inIndex2];
        tri2.t1 = textures[inIndex2];
        tri2.n1 = normals[inIndex2];

        tri2.v2 = lerp(vertices[inIndex2], vertices[outIndex], t2);
        tri2.t2 = lerp(textures[inIndex2], textures[outIndex], t2);
        tri2.n2 = normalize(lerp(normals[inIndex2], normals[outIndex], t2));
        
        OutputTriangles.Append(tri1);
        
        InterlockedAdd(TriangleCounter[0], 1);
        
        OutputTriangles.Append(tri2);
        
        InterlockedAdd(TriangleCounter[0], 1);
    }
}
