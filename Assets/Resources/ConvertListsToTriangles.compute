// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct TriangleData
{
    float3 v0, v1, v2;
    float2 t0, t1, t2;
    float3 n0, n1, n2;
};

RWStructuredBuffer<float3> VertexBuffer;
RWStructuredBuffer<float2> TextureBuffer;
RWStructuredBuffer<float3> NormalBuffer;
RWStructuredBuffer<int> IndexBuffer;

AppendStructuredBuffer<TriangleData> OutputTriangles;

RWStructuredBuffer<uint> TriangleCounter;

float4 CamPosition;

[numthreads(1, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    TriangleData tri;
    
    int i30 = id * 3;
    int i31 = id * 3 + 1;
    int i32 = id * 3 + 2;
    
    int ib0 = IndexBuffer[i30];
    int ib1 = IndexBuffer[i31];
    int ib2 = IndexBuffer[i32];

    float3 edge1 = VertexBuffer[ib1] - VertexBuffer[ib0];
    float3 edge2 = VertexBuffer[ib2] - VertexBuffer[ib0];
    float3 normal = normalize(cross(edge1, edge2));
    float3 camDir = normalize(CamPosition.xyz - VertexBuffer[ib0]);
    float triangleDirection = dot(normal, camDir);

    if (triangleDirection < 0)
    {
        return;
    }
    
    tri.v0 = VertexBuffer[ib0];
    tri.v1 = VertexBuffer[ib1];
    tri.v2 = VertexBuffer[ib2];

    tri.t0 = TextureBuffer[ib0];
    tri.t1 = TextureBuffer[ib1];
    tri.t2 = TextureBuffer[ib2];

    tri.n0 = NormalBuffer[ib0];
    tri.n1 = NormalBuffer[ib1];
    tri.n2 = NormalBuffer[ib2];
    
    OutputTriangles.Append(tri);
    
    InterlockedAdd(TriangleCounter[0], 1);
}